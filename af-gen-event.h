// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef __AF_GEN_EVENT__
#define __AF_GEN_EVENT__


// Code used to configure the cluster event mechanism
#define EMBER_AF_GENERATED_EVENT_CODE \
  EmberEventControl emberAfOtaBootloadClusterClientTickCallbackControl1; \
  EmberEventControl emberAfOtaBootloadClusterClientTickCallbackControl2; \
  EmberEventControl emberAfOtaBootloadClusterClientTickCallbackControl3; \
  extern EmberEventControl channel_scan_envent_control; \
  extern EmberEventControl emberAfPluginButtonInterfaceButton0PressedEventControl; \
  extern EmberEventControl emberAfPluginButtonInterfaceButton0ReleasedEventControl; \
  extern EmberEventControl emberAfPluginButtonInterfaceButton1PressedEventControl; \
  extern EmberEventControl emberAfPluginButtonInterfaceButton1ReleasedEventControl; \
  extern EmberEventControl emberAfPluginButtonInterfaceButton2PressedEventControl; \
  extern EmberEventControl emberAfPluginButtonInterfaceButton2ReleasedEventControl; \
  extern EmberEventControl emberAfPluginButtonInterfaceButtonTimeoutEventControl; \
  extern EmberEventControl emberAfPluginInterpanFragmentReceiveEventControl; \
  extern EmberEventControl emberAfPluginInterpanFragmentTransmitEventControl; \
  extern EmberEventControl emberAfPluginManufacturingLibraryCliCheckSendCompleteEventControl; \
  extern EmberEventControl emberAfPluginNetworkSteeringFinishSteeringEventControl; \
  extern EmberEventControl emberAfPluginOtaStorageSimpleEepromPageEraseEventControl; \
  extern EmberEventControl emberAfPluginUpdateTcLinkKeyBeginTcLinkKeyUpdateEventControl; \
  extern EmberEventControl heartbeat_event_control; \
  extern EmberEventControl long_press_network_link_event_control; \
  extern EmberEventControl network_link_event_control; \
  extern EmberEventControl network_up_renew_sw_state_event_control; \
  extern EmberEventControl power_up_relay_off_event_control; \
  extern EmberEventControl reset_rejoin_event_control; \
  extern EmberEventControl sw0_press_low_event_control; \
  extern EmberEventControl sw0_press_short_event_control; \
  extern EmberEventControl sw0_relay_event_control; \
  extern EmberEventControl sw1_press_low_event_control; \
  extern EmberEventControl sw1_press_short_event_control; \
  extern EmberEventControl sw1_relay_event_control; \
  extern EmberEventControl sw2_press_low_event_control; \
  extern EmberEventControl sw2_press_short_event_control; \
  extern EmberEventControl sw2_relay_event_control; \
  extern void channel_scan_envent_handler(void); \
  extern void emberAfPluginButtonInterfaceButton0PressedEventHandler(void); \
  extern void emberAfPluginButtonInterfaceButton0ReleasedEventHandler(void); \
  extern void emberAfPluginButtonInterfaceButton1PressedEventHandler(void); \
  extern void emberAfPluginButtonInterfaceButton1ReleasedEventHandler(void); \
  extern void emberAfPluginButtonInterfaceButton2PressedEventHandler(void); \
  extern void emberAfPluginButtonInterfaceButton2ReleasedEventHandler(void); \
  extern void emberAfPluginButtonInterfaceButtonTimeoutEventHandler(void); \
  extern void emberAfPluginInterpanFragmentReceiveEventHandler(void); \
  extern void emberAfPluginInterpanFragmentTransmitEventHandler(void); \
  extern void emberAfPluginManufacturingLibraryCliCheckSendCompleteEventHandler(void); \
  extern void emberAfPluginNetworkSteeringFinishSteeringEventHandler(void); \
  extern void emberAfPluginOtaStorageSimpleEepromPageEraseEventHandler(void); \
  extern void emberAfPluginUpdateTcLinkKeyBeginTcLinkKeyUpdateEventHandler(void); \
  extern void heartbeat_event_handler(void); \
  extern void long_press_network_link_event_handler(void); \
  extern void network_link_event_handler(void); \
  extern void network_up_renew_sw_state_event_handler(void); \
  extern void power_up_relay_off_event_handler(void); \
  extern void reset_rejoin_event_handler(void); \
  extern void sw0_press_low_event_handler(void); \
  extern void sw0_press_short_event_handler(void); \
  extern void sw0_relay_event_handler(void); \
  extern void sw1_press_low_event_handler(void); \
  extern void sw1_press_short_event_handler(void); \
  extern void sw1_relay_event_handler(void); \
  extern void sw2_press_low_event_handler(void); \
  extern void sw2_press_short_event_handler(void); \
  extern void sw2_relay_event_handler(void); \
  static void networkEventWrapper(EmberEventControl *control, EmberAfNetworkEventHandler handler, uint8_t networkIndex) \
  { \
    emberAfPushNetworkIndex(networkIndex); \
    emberEventControlSetInactive(*control); \
    (*handler)(); \
    emberAfPopNetworkIndex(); \
  } \
  EmberEventControl emberAfPluginEndDeviceSupportMoveNetworkEventControls[1]; \
  extern void emberAfPluginEndDeviceSupportMoveNetworkEventHandler(void); \
  void emberAfPluginEndDeviceSupportMoveNetworkEventWrapper0(void) { networkEventWrapper(&emberAfPluginEndDeviceSupportMoveNetworkEventControls[0], emberAfPluginEndDeviceSupportMoveNetworkEventHandler, 0); } \
  EmberEventControl emberAfPluginEndDeviceSupportPollingNetworkEventControls[1]; \
  extern void emberAfPluginEndDeviceSupportPollingNetworkEventHandler(void); \
  void emberAfPluginEndDeviceSupportPollingNetworkEventWrapper0(void) { networkEventWrapper(&emberAfPluginEndDeviceSupportPollingNetworkEventControls[0], emberAfPluginEndDeviceSupportPollingNetworkEventHandler, 0); } \
  EmberEventControl emberAfPluginScanDispatchScanNetworkEventControls[1]; \
  extern void emberAfPluginScanDispatchScanNetworkEventHandler(void); \
  void emberAfPluginScanDispatchScanNetworkEventWrapper0(void) { networkEventWrapper(&emberAfPluginScanDispatchScanNetworkEventControls[0], emberAfPluginScanDispatchScanNetworkEventHandler, 0); } \
  static void clusterTickWrapper(EmberEventControl *control, EmberAfTickFunction callback, uint8_t endpoint) \
  { \
    emberAfPushEndpointNetworkIndex(endpoint); \
    emberEventControlSetInactive(*control); \
    (*callback)(endpoint); \
    emberAfPopNetworkIndex(); \
  } \
  void emberAfOtaBootloadClusterClientTickCallbackWrapperFunction1(void) { clusterTickWrapper(&emberAfOtaBootloadClusterClientTickCallbackControl1, emberAfOtaBootloadClusterClientTickCallback, 1); } \
  void emberAfOtaBootloadClusterClientTickCallbackWrapperFunction2(void) { clusterTickWrapper(&emberAfOtaBootloadClusterClientTickCallbackControl2, emberAfOtaBootloadClusterClientTickCallback, 2); } \
  void emberAfOtaBootloadClusterClientTickCallbackWrapperFunction3(void) { clusterTickWrapper(&emberAfOtaBootloadClusterClientTickCallbackControl3, emberAfOtaBootloadClusterClientTickCallback, 3); } \


// EmberEventData structs used to populate the EmberEventData table
#define EMBER_AF_GENERATED_EVENTS   \
  { &emberAfOtaBootloadClusterClientTickCallbackControl1, emberAfOtaBootloadClusterClientTickCallbackWrapperFunction1 }, \
  { &emberAfOtaBootloadClusterClientTickCallbackControl2, emberAfOtaBootloadClusterClientTickCallbackWrapperFunction2 }, \
  { &emberAfOtaBootloadClusterClientTickCallbackControl3, emberAfOtaBootloadClusterClientTickCallbackWrapperFunction3 }, \
  { &channel_scan_envent_control, channel_scan_envent_handler }, \
  { &emberAfPluginButtonInterfaceButton0PressedEventControl, emberAfPluginButtonInterfaceButton0PressedEventHandler }, \
  { &emberAfPluginButtonInterfaceButton0ReleasedEventControl, emberAfPluginButtonInterfaceButton0ReleasedEventHandler }, \
  { &emberAfPluginButtonInterfaceButton1PressedEventControl, emberAfPluginButtonInterfaceButton1PressedEventHandler }, \
  { &emberAfPluginButtonInterfaceButton1ReleasedEventControl, emberAfPluginButtonInterfaceButton1ReleasedEventHandler }, \
  { &emberAfPluginButtonInterfaceButton2PressedEventControl, emberAfPluginButtonInterfaceButton2PressedEventHandler }, \
  { &emberAfPluginButtonInterfaceButton2ReleasedEventControl, emberAfPluginButtonInterfaceButton2ReleasedEventHandler }, \
  { &emberAfPluginButtonInterfaceButtonTimeoutEventControl, emberAfPluginButtonInterfaceButtonTimeoutEventHandler }, \
  { &emberAfPluginInterpanFragmentReceiveEventControl, emberAfPluginInterpanFragmentReceiveEventHandler }, \
  { &emberAfPluginInterpanFragmentTransmitEventControl, emberAfPluginInterpanFragmentTransmitEventHandler }, \
  { &emberAfPluginManufacturingLibraryCliCheckSendCompleteEventControl, emberAfPluginManufacturingLibraryCliCheckSendCompleteEventHandler }, \
  { &emberAfPluginNetworkSteeringFinishSteeringEventControl, emberAfPluginNetworkSteeringFinishSteeringEventHandler }, \
  { &emberAfPluginOtaStorageSimpleEepromPageEraseEventControl, emberAfPluginOtaStorageSimpleEepromPageEraseEventHandler }, \
  { &emberAfPluginUpdateTcLinkKeyBeginTcLinkKeyUpdateEventControl, emberAfPluginUpdateTcLinkKeyBeginTcLinkKeyUpdateEventHandler }, \
  { &heartbeat_event_control, heartbeat_event_handler }, \
  { &long_press_network_link_event_control, long_press_network_link_event_handler }, \
  { &network_link_event_control, network_link_event_handler }, \
  { &network_up_renew_sw_state_event_control, network_up_renew_sw_state_event_handler }, \
  { &power_up_relay_off_event_control, power_up_relay_off_event_handler }, \
  { &reset_rejoin_event_control, reset_rejoin_event_handler }, \
  { &sw0_press_low_event_control, sw0_press_low_event_handler }, \
  { &sw0_press_short_event_control, sw0_press_short_event_handler }, \
  { &sw0_relay_event_control, sw0_relay_event_handler }, \
  { &sw1_press_low_event_control, sw1_press_low_event_handler }, \
  { &sw1_press_short_event_control, sw1_press_short_event_handler }, \
  { &sw1_relay_event_control, sw1_relay_event_handler }, \
  { &sw2_press_low_event_control, sw2_press_low_event_handler }, \
  { &sw2_press_short_event_control, sw2_press_short_event_handler }, \
  { &sw2_relay_event_control, sw2_relay_event_handler }, \
  { &emberAfPluginEndDeviceSupportMoveNetworkEventControls[0], emberAfPluginEndDeviceSupportMoveNetworkEventWrapper0 }, \
  { &emberAfPluginEndDeviceSupportPollingNetworkEventControls[0], emberAfPluginEndDeviceSupportPollingNetworkEventWrapper0 }, \
  { &emberAfPluginScanDispatchScanNetworkEventControls[0], emberAfPluginScanDispatchScanNetworkEventWrapper0 }, \


#define EMBER_AF_GENERATED_EVENT_STRINGS   \
  "Over the Air Bootloading Cluster Client EP 1",  \
  "Over the Air Bootloading Cluster Client EP 2",  \
  "Over the Air Bootloading Cluster Client EP 3",  \
  "Channel_scan_envent_control",  \
  "Button Interface Plugin Button0Pressed",  \
  "Button Interface Plugin Button0Released",  \
  "Button Interface Plugin Button1Pressed",  \
  "Button Interface Plugin Button1Released",  \
  "Ember af plugin button interface button2 pressed event control",  \
  "Ember af plugin button interface button2 released event control",  \
  "Button Interface Plugin ButtonTimeout",  \
  "Interpan Plugin FragmentReceive",  \
  "Interpan Plugin FragmentTransmit",  \
  "Manufacturing Library CLI Plugin CheckSendComplete",  \
  "Network Steering Plugin FinishSteering",  \
  "OTA Simple Storage EEPROM Driver Plugin PageErase",  \
  "Update TC Link Key Plugin BeginTcLinkKeyUpdate",  \
  "Heartbeat_event_control",  \
  "Long_press_network_link_event_control",  \
  "Network_link_event_control",  \
  "Network_up_renew_sw_state_event_control",  \
  "Power_up_relay_off_event_control",  \
  "Reset_rejoin_event_control",  \
  "Sw0_press_low_event_control",  \
  "Sw0_press_short_event_control",  \
  "Sw0_relay_event_control",  \
  "Sw1_press_low_event_control",  \
  "Sw1_press_short_event_control",  \
  "Sw1_relay_event_control",  \
  "Sw2_press_low_event_control",  \
  "Sw2_press_short_event_control",  \
  "Sw2_relay_event_control",  \
  "End Device Support Plugin Move NWK 0", \
  "End Device Support Plugin Polling NWK 0", \
  "Scan Dispatch Plugin Scan NWK 0", \


// The length of the event context table used to track and retrieve cluster events
#define EMBER_AF_EVENT_CONTEXT_LENGTH 3

// EmberAfEventContext structs used to populate the EmberAfEventContext table
#define EMBER_AF_GENERATED_EVENT_CONTEXT { 0x1, 0x19, true, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfOtaBootloadClusterClientTickCallbackControl1}, \
{ 0x2, 0x19, true, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfOtaBootloadClusterClientTickCallbackControl2}, \
{ 0x3, 0x19, true, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfOtaBootloadClusterClientTickCallbackControl3}


#endif // __AF_GEN_EVENT__
